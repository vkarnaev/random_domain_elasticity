include "getARGV.idp"
load "iovtk"

int s = getARGV("-s", 1); // sample number
int t = getARGV("-t", 0); // quadrature type
int l = getARGV("-l", 1); // level
int m = getARGV("-m", 0); // number of samples

mesh Th0 = readmesh("./storage/meshes/det/mesh0.msh"); // body
mesh Th1 = readmesh("./storage/meshes/det/mesh1.msh"); // inculsion 
mesh Th = readmesh("./storage/meshes/det/mesh.msh"); // initialising mesh

string file; 
if(t==2) file = "./utils/points/SG-GL_points_l" + l + ".txt";
ifstream fp(file);

if(!m){ 
  m = -1;

  string c;
  while(1){
    if (!fp.good()) break;
    getline(fp, c);
    m++;
  }
  fp.seekg(0);
}

ifstream fev("./storage/ev/ev.txt"); // file with eigen values
ifstream fgamma("./storage/ev/gamma.txt");

real eig;
fev  >> eig; // number of eigen values

real[int] ev(eig);

real[int] ap(m*eig);
for(int j=0; j<m*eig; j++) fp >> ap[j];

real p = 0.;

fespace Vh(Th, P1);
Vh[int] eV1(eig), eV2(eig); // eigen vectors 
Vh KL1, KL2; // random deformation field

for (int i=0; i<eig; i++){
  ifstream feV1("./storage/ev/eV1/eV1" + i + ".txt"); 
  ifstream feV2("./storage/ev/eV2/eV2" + i + ".txt"); // files with eigen vector

  fev >> ev[i]; // array of eigen values
  feV1 >> eV1[i][];
  feV2 >> eV2[i][]; // arrays of eigen vector

  cout << "smaple:  " << s << "   number:  " << i << "   point:  " << ap[i+(s-1)*eig] << endl;

  p = sqrt(3)*(2.*ap[i+(s-1)*eig]-1.);

  KL1 = KL1 + p*sqrt(ev[i])*eV1[i];
  KL2 = KL2 + p*sqrt(ev[i])*eV2[i]; 

}

plot(Th,[KL1,KL2], wait=true, value=true);
//savevtk("./storage/paraview/KL_sample.vtu", Th, [KL1, KL2, 0], dataname="KL_sample");

Th0 = movemesh(Th0, [x+KL1, y+KL2]); // moving mesh
Th1 = movemesh(Th1, [x+KL1, y+KL2]); // moving mesh
Th = Th0 + Th1;

plot(Th, wait = true);
//savevtk("./storage/paraview/th_sample.vtu", Th, dataname="Th_sample");

savemesh(Th0, "./storage/meshes/rand/mesh0/mesh0_" + s + ".msh");
savemesh(Th1, "./storage/meshes/rand/mesh1/mesh1_" + s + ".msh");
savemesh(Th, "./storage/meshes/rand/mesh/mesh_" + s + ".msh");