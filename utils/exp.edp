load "iovtk"
include "getARGV.idp"

int t = getARGV("-t", 0); // quadrature type
int l = getARGV("-l", 1); // level
int m = getARGV("-m", 0); // number of samples

mesh Th0 = readmesh("./storage/meshes/det/mesh0.msh"); // body
mesh Th1 = readmesh("./storage/meshes/det/mesh1.msh"); // inculsion 
mesh Th = readmesh("./storage/meshes/det/mesh.msh"); // initialising mesh

string file; 
if(t==2) file = "./utils/points/SG-GL_weights_l" + l + ".txt";
ifstream fw(file);

if(!m){
    m = -1;
    string c;

    while(1){
        if (!fw.good()) break;
        getline(fw, c);
        m++;
    }

    fw.seekg(0);
}

real[int] aw(m);

for(int i=0; i<m; i++) fw >> aw[i];

fespace Vh1(Th, P1);
Vh1 ESig, ESig2, VSig, sigi;

fespace Vh(Th, [P1,P1]);
Vh [Eu,Ev], [ui,vi];

for(int i=1; i<m+1; i++){
    ifstream fsigi("./storage/solutions/rand/sig/sig_" + i + ".txt");
    fsigi >> sigi[];

    ifstream fui("./storage/solutions/rand/u/u_" + i + ".txt");
    fui >> ui[];

    ifstream fvi("./storage/solutions/rand/v/v_" + i + ".txt");
    fvi >> vi[];

    cout << "WEIGHT:  " << aw[i-1] << endl;

    ESig = ESig + aw[i-1]*sigi;
    ESig2 = ESig2 + aw[i-1]*sigi*sigi;
    [Eu,Ev] = [Eu,Ev] + [aw[i-1]*ui,aw[i-1]*vi];
}

VSig = ESig2 - ESig*ESig;

if(m>=8000){
    savevtk("./exp/sig_exp_ref.vtu", Th, ESig, dataname="sig_exp_ref");
    savevtk("./exp/sig_var_ref.vtu", Th, VSig, dataname="sig_var_ref");

    mesh Th0d = movemesh(Th0, [x+Eu, y+Ev]); 
    mesh Th1d = movemesh(Th1, [x+Eu, y+Ev]); 
    mesh Thd =Th0d + Th1d; // body deformation
}

if (m<=8) {
    savemesh(Th0, "./exp/mesh0.msh");
    savemesh(Th1, "./exp/mesh1.msh");
    savemesh(Th, "./exp/mesh.msh");
}

string feu = "./exp/u_exp_" + l + ".txt";;
string fev = "./exp/v_exp_" + l + ".txt";

ofstream ffeu(feu);
ofstream ffev(fev);

ffeu << Eu[];
ffev << Ev[];
