load "iovtk"
include "getARGV.idp"

int t = getARGV("-t", 0); // quadrature type
int l = getARGV("-l", 1); // level
int m = getARGV("-m", 0); // number of samples

mesh Th0 = readmesh("./storage/meshes/det/mesh0.msh"); // body
mesh Th1 = readmesh("./storage/meshes/det/mesh1.msh"); // inculsion 
mesh Th = readmesh("./storage/meshes/det/mesh.msh"); // initialising mesh

string file; 
if(t==2) file = "./utils/points/SG-GL_weights_l" + l + ".txt";
else file = "./utils/points/uniform_weights_l" + l + ".txt";
ifstream fw(file);

if(!m){
    m = -1;
    string c;

    while(1){
        if (!fw.good()) break;
        getline(fw, c);
        m++;
    }

    fw.seekg(0);
}

real[int] aw(m);

fespace Vh1(Th, P1);
Vh1 Esig, Vsig, Vuu, Vuv, Vvv;
Vh1[int] sig(m);

fespace Vh(Th, [P1,P1]);
Vh [Eu, Ev];
Vh[int] [u,v](m);



int ii;

for(int i=0; i<m; i++){
    ii = i+1;

    fw >> aw[i];

    ifstream fsigi("./storage/solutions/rand/sig/sig_" + ii + ".txt");
    fsigi >> sig[i][];

    ifstream fui("./storage/solutions/rand/u/u_" + ii + ".txt");
    fui >> u[i][];

    ifstream fvi("./storage/solutions/rand/v/v_" + ii + ".txt");
    fvi >> v[i][];

    Esig = Esig + aw[i]*sig[i];

    [Eu,Ev] = [Eu,Ev] + [aw[i]*u[i], aw[i]*v[i]];
}

for(int i=0; i<m; i++){
    Vsig = Vsig + aw[i]*(sig[i] - Esig)*(sig[i] - Esig);

    Vuu = Vuu + aw[i]*(u[i] - Eu)*(u[i] - Eu);
    Vuv = Vuv + aw[i]*(u[i] - Eu)*(v[i] - Ev);
    Vvv = Vvv + aw[i]*(v[i] - Ev)*(v[i] - Ev);
}

string type;
if(t==0) type = "halton";
if(t==1) type = "sobol";
if(t==2) type = "sg";
if(t==3) type = "iplr2";

string feu = "./exp/" + type + "/l" + l + "/u_exp_t" + t + "_l" + l + ".txt";
string fev = "./exp/" + type + "/l" + l + "/v_exp_t" + t + "_l" + l + ".txt";

string fvuu = "./exp/" + type + "/l" + l + "/uu_var_t" + t + "_l" + l + ".txt";
string fvuv = "./exp/" + type + "/l" + l + "/uv_var_t" + t + "_l" + l + ".txt";
string fvvv = "./exp/" + type + "/l" + l + "/vv_var_t" + t + "_l" + l + ".txt";

string fesig = "./exp/" + type + "/l" + l + "/sig_exp_t" + t + "_l" + l + ".txt";
string fvsig = "./exp/" + type + "/l" + l + "/sig_var_t" + t + "_l" + l + ".txt";

ofstream ffeu(feu);
ofstream ffev(fev);

ofstream ffvuu(fvuu);
ofstream ffvuv(fvuv);
ofstream ffvvv(fvvv);

ofstream ffesig(fesig);
ofstream ffvsig(fvsig);

ffeu << Eu[];
ffev << Ev[];

ffvuu << Vuu[];
ffvuv << Vuv[];
ffvvv << Vvv[];

ffesig << Esig[];
ffvsig << Vsig[];

