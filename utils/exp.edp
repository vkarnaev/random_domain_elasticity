load "iovtk"
include "getARGV.idp"

int m = getARGV("-m", 10); // setting number of samples

mesh Th0 = readmesh("./storage/meshes/det/mesh0.msh"); // body
mesh Th1 = readmesh("./storage/meshes/det/mesh1.msh"); // inculsion 
mesh Th = readmesh("./storage/meshes/det/mesh.msh"); // initialising mesh

fespace Vh1(Th, P1);
Vh1 ESig, ESig2, VSig, sigi;

fespace Vh(Th, [P1,P1]);
Vh [Eu,Ev], [ui,vi];

for(int i=1; i<m+1; i++){
    ifstream fsigi("./storage/solutions/rand/sig/sig_" + i + ".txt");
    fsigi >> sigi[];

    ifstream fui("./storage/solutions/rand/u/u_" + i + ".txt");
    fui >> ui[];

    ifstream fvi("./storage/solutions/rand/v/v_" + i + ".txt");
    fvi >> vi[];

    ESig = ESig + sigi/m;
    ESig2 = ESig2 + sigi*sigi/m;
    [Eu,Ev] = [Eu,Ev] + [ui/m,vi/m];
}

VSig = ESig2 - ESig*ESig;

if(m==10000){
    savevtk("./exp/sig_exp_10k.vtu", Th, ESig, dataname="sig_exp_10k");
    savevtk("./exp/sig_var_10k.vtu", Th, VSig, dataname="sig_var_10k");

    mesh Th0d = movemesh(Th0, [x+Eu, y+Ev]); 
    mesh Th1d = movemesh(Th1, [x+Eu, y+Ev]); 
    mesh Thd =Th0d + Th1d; // body deformation
}

if (m==8) {
    savemesh(Th0d, "./exp/mesh0.msh");
    savemesh(Th1d, "./exp/mesh1.msh");
    savemesh(Thd, "./exp/mesh.msh");
}

string fesig = "./exp/sig_exp_" + m + ".txt";
string fvsig = "./exp/sig_var_" + m + ".txt";
string feu = "./exp/u_exp_" + m + ".txt";;
string fev = "./exp/v_exp_" + m + ".txt";

ofstream ffesig(fesig);
ofstream ffvsig(fvsig);
ofstream ffeu(feu);
ofstream ffev(fev);

ffesig << ESig[];
ffvsig << VSig[];
ffeu << Eu[];
ffev << Ev[];